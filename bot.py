"""
Telegram –±–æ—Ç - –≤–æ—Ä–æ–Ω–∫–∞ "–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å"
"""
import logging
import os
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from telegram.error import TelegramError

import config
import config_timing
from database import Database
import messages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! üëã\n\n"
        f"–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –≠—Ç–∞–ª–æ–Ω–∞!\n\n"
        f"üìö –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º "
        f"–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é –≤ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n\n"
        f"üîë –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ "
        f"–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞."
    )
    
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ **–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å**, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
    )
    
    await update.message.reply_text(help_text)


async def check_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    user_info = db.get_user_info(user_id)
    
    message = (
        f"üÜî –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"ID: {user_id}\n"
        f"Username: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ò–º—è: {update.effective_user.first_name}\n\n"
        f"ADMIN_ID –≤ –±–æ—Ç–µ: {config.ADMIN_ID}\n"
        f"–í—ã –∞–¥–º–∏–Ω: {'‚úÖ –î–ê' if user_id == config.ADMIN_ID else '‚ùå –ù–ï–¢'}\n\n"
    )
    
    if user_info:
        message += (
            f"–°—Ç–∞—Ç—É—Å –≤ –≤–æ—Ä–æ–Ω–∫–µ: {user_info['status']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {'‚úÖ –î–ê' if user_info['contact_provided'] else '‚ùå –ù–ï–¢'}"
        )
    else:
        message += "–í—ã –µ—â—ë –Ω–µ –≤ –±–∞–∑–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ **–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å**."
    
    await update.message.reply_text(message)


async def send_offer_delayed(application, user_id: int, delay: int = 60):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É"""
    await asyncio.sleep(delay)
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç
        user_info = db.get_user_info(user_id)
        if user_info and user_info['contact_provided']:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        await application.bot.send_message(
            chat_id=user_id,
            text=messages.OFFER_MESSAGE
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_message_time - –ø–µ—Ä–≤—ã–π –¥–æ–≥—Ä–µ–≤ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        db.update_user_status(user_id, 'offer_sent', update_time=True)
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except TelegramError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def handle_antistress_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å"""
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PDF —Ñ–∞–π–ª
    if not os.path.exists(config.PDF_FILE_PATH):
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        logger.error(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.PDF_FILE_PATH}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = db.add_user(
        user_id=user_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    if not is_new_user:
        await update.message.reply_text(
            "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(messages.WELCOME_MESSAGE)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
    try:
        with open(config.PDF_FILE_PATH, 'rb') as pdf_file:
            await update.message.reply_document(document=pdf_file)
        
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id} (@{user.username})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        asyncio.create_task(send_offer_delayed(context.application, user_id, delay=config_timing.OFFER_DELAY_SECONDS))
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ {config_timing.OFFER_DELAY_SECONDS} —Å–µ–∫ –¥–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def validate_phone_number(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤)
        
    Returns:
        True –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π
    """
    # –£–¥–∞–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_phone = phone.lstrip('+')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not clean_phone.isdigit():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (10-12 —Ü–∏—Ñ—Ä)
    if len(clean_phone) < 10 or len(clean_phone) > 12:
        return False
    
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä
    if clean_phone[0] in ['7', '8']:
        return len(clean_phone) == 11
    
    return True


def extract_contact_info(text: str) -> tuple:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Returns:
        (name, phone) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        (None, 'invalid') –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    """
    # –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    phone_patterns = [
        r'\+?7[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',  # +7 (xxx) xxx-xx-xx
        r'\+?\d{10,12}',  # –ü—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã (10-12 —Å–∏–º–≤–æ–ª–æ–≤)
        r'8[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}',  # 8 (xxx) xxx-xx-xx
    ]
    
    phone = None
    for pattern in phone_patterns:
        match = re.search(pattern, text)
        if match:
            phone = match.group().strip()
            # –£–¥–∞–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∏–º—è
            text = text.replace(match.group(), '').strip()
            break
    
    if not phone:
        return None, None
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_phone = re.sub(r'[\s\-\(\)]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if not validate_phone_number(clean_phone):
        return None, 'invalid'
    
    # –ò–º—è - —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    name = re.sub(r'[^\w\s\-–ê-–Ø–∞-—è–Å—ëA-Za-z]', '', text).strip()
    
    if not name:
        return None, clean_phone
    
    return name, clean_phone


async def handle_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_info = db.get_user_info(user_id)
    if not user_info:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if user_info['status'] == 'file_sent':
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return False
    
    # –ï—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if user_info['contact_provided']:
        return False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Telegram Contact
    if update.message.contact:
        phone = update.message.contact.phone_number
        name = update.message.contact.first_name or update.effective_user.first_name
        
        db.save_contact(user_id, name, phone)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        await update.message.reply_text(messages.THANK_YOU_MESSAGE)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await notify_admin_about_contact(context, user_id, name, phone, update.effective_user.username)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {user_id}: {name}, {phone}")
        return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if update.message.text:
        name, phone = extract_contact_info(update.message.text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if phone == 'invalid':
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ +79991234567\n"
                "‚Ä¢ 89991234567\n"
                "‚Ä¢ 79991234567\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +79991234567"
            )
            return False
        
        if name and phone:
            db.save_contact(user_id, name, phone)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            await update.message.reply_text(messages.THANK_YOU_MESSAGE)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await notify_admin_about_contact(context, user_id, name, phone, update.effective_user.username)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {user_id}: {name}, {phone}")
            return True
    
    return False


async def notify_admin_about_contact(context, user_id, name, phone, username):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
    if not config.ADMIN_ID:
        return
    
    try:
        notification = messages.ADMIN_NOTIFICATION.format(
            name=name,
            phone=phone,
            user_id=user_id,
            username=username or '–Ω–µ —É–∫–∞–∑–∞–Ω',
            date=datetime.now().strftime('%d.%m.%Y %H:%M')
        )
        
        await context.bot.send_message(
            chat_id=config.ADMIN_ID,
            text=notification
        )
    except TelegramError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
    if message_text.lower() == config.CODE_WORD.lower():
        await handle_antistress_code(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_info = db.get_user_info(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç
    if user_info:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if user_info['status'] == 'file_sent':
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            return
        
        contact_handled = await handle_contact_message(update, context)
        
        if not contact_handled:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if user_info['contact_provided']:
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            else:
                # –ö–æ–Ω—Ç–∞–∫—Ç –µ—â–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
                    "üìù –§–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è +79991234567\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +79991234567"
                )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–∑–µ - –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã."
        )


async def check_warmup_users(application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–≥—Ä–µ–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    while True:
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–≥—Ä–µ–≤–∞...")
            
            # –ü–µ—Ä–≤—ã–π –¥–æ–≥—Ä–µ–≤
            users_for_warmup1 = db.get_users_for_warmup(hours=config_timing.WARMUP_1_HOURS, warmup_number=1)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_for_warmup1)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ–≥—Ä–µ–≤–∞")
            
            for user in users_for_warmup1:
                try:
                    await application.bot.send_message(
                        chat_id=user['user_id'],
                        text=messages.WARMUP_1_MESSAGE
                    )
                    db.mark_warmup_sent(user['user_id'], 1)
                    logger.info(f"–ü–µ—Ä–≤—ã–π –¥–æ–≥—Ä–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–≥—Ä–µ–≤–∞ {user['user_id']}: {e}")
            
            # –í—Ç–æ—Ä–æ–π –¥–æ–≥—Ä–µ–≤
            users_for_warmup2 = db.get_users_for_warmup(hours=config_timing.WARMUP_2_HOURS, warmup_number=2)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_for_warmup2)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–≥—Ä–µ–≤–∞")
            
            for user in users_for_warmup2:
                try:
                    await application.bot.send_message(
                        chat_id=user['user_id'],
                        text=messages.WARMUP_2_MESSAGE
                    )
                    db.mark_warmup_sent(user['user_id'], 2)
                    logger.info(f"–í—Ç–æ—Ä–æ–π –¥–æ–≥—Ä–µ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–≥—Ä–µ–≤–∞ {user['user_id']}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –¥–æ–≥—Ä–µ–≤–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        await asyncio.sleep(config_timing.CHECK_INTERVAL_SECONDS)


# ===== –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    total_users = db.get_user_count()
    with_contact = db.get_contact_count()
    without_contact = total_users - with_contact
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ \"–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å\":\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –û—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç: {with_contact}\n"
        f"‚è≥ –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {without_contact}\n"
        f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {round(with_contact / total_users * 100, 1) if total_users > 0 else 0}%"
    )
    
    await update.message.reply_text(stats_text)


async def broadcast_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_all <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ—Ä–æ–Ω–∫–∏"
        )
        return
    
    message_text = ' '.join(context.args)
    users = db.get_all_users()
    
    await send_broadcast(update, context, users, message_text, "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


async def broadcast_without_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_no_contact <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ù–ï –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç"
        )
        return
    
    message_text = ' '.join(context.args)
    users = db.get_users_without_contact()
    
    await send_broadcast(update, context, users, message_text, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞")


async def broadcast_with_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_with_contact <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç"
        )
        return
    
    message_text = ' '.join(context.args)
    users = db.get_users_with_contact()
    
    await send_broadcast(update, context, users, message_text, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")


async def send_broadcast(update, context, users, message_text, description):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not users:
        await update.message.reply_text(f"–ù–µ—Ç {description} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    await update.message.reply_text(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} {description}...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            success_count += 1
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
    
    result_text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫: {fail_count}"
    )
    
    await update.message.reply_text(result_text)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not config.BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("id", check_id))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("broadcast_all", broadcast_all))
    application.add_handler(CommandHandler("broadcast_no_contact", broadcast_without_contact))
    application.add_handler(CommandHandler("broadcast_with_contact", broadcast_with_contact))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        handle_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    application.add_handler(MessageHandler(
        filters.CONTACT,
        handle_contact_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def post_init(application: Application) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        asyncio.create_task(check_warmup_users(application))
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –¥–æ–≥—Ä–µ–≤–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é post_init
    application.post_init = post_init
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
